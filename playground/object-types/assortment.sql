DROP TYPE ITEM FORCE;
DROP TYPE ITEMS FORCE;
DROP TYPE ITEM_ASSORTMENT FORCE;
DROP TYPE ITEM_ASSORTMENTS FORCE;
DROP TYPE ITEM_ASSORTMENT_CONTAINER FORCE;

--###############---------START------------###############################
CREATE OR REPLACE TYPE PLAYGROUND.ITEM
  AUTHID DEFINER
  AS
  OBJECT (N_WEIGHT NUMBER(19, 2), --weight in kg
          N_VALUE NUMBER(19, 2), --value in $
          MEMBER FUNCTION GET_WEIGHT
            RETURN NUMBER,
          MEMBER FUNCTION GET_VALUE
            RETURN NUMBER);
/

CREATE TYPE BODY PLAYGROUND.ITEM
  AS

    MEMBER FUNCTION GET_WEIGHT
      RETURN NUMBER
      IS
      BEGIN
        RETURN SELF.N_WEIGHT;
      END GET_WEIGHT;

    MEMBER FUNCTION GET_VALUE
      RETURN NUMBER
      IS
      BEGIN
        RETURN SELF.N_VALUE;
      END GET_VALUE;

  END;
/
--##############################################


--###############---------START------------###############################
CREATE TYPE ITEMS AS VARRAY (1000) OF PLAYGROUND.ITEM;
/
--##############################################


--###############---------START------------###############################
CREATE TYPE ITEM_ASSORTMENT
  AUTHID DEFINER
  AS
  OBJECT (N_TOTAL_WEIGHT NUMBER,
          N_TOTAL_VALUE NUMBER,
          R_ITEMS PLAYGROUND.ITEMS,
          CONSTRUCTOR FUNCTION ITEM_ASSORTMENT(P_R_ITEMS IN PLAYGROUND.ITEMS)
            RETURN SELF AS RESULT,
          MEMBER FUNCTION GET_TOTAL_VALUE
            RETURN NUMBER,
          MEMBER FUNCTION GET_TOTAL_WEIGHT
            RETURN NUMBER,
          MEMBER FUNCTION GET_ASSORTMENTS
            RETURN PLAYGROUND.ITEMS);
/

CREATE TYPE BODY ITEM_ASSORTMENT
  AS

    CONSTRUCTOR FUNCTION ITEM_ASSORTMENT(P_R_ITEMS IN PLAYGROUND.ITEMS)
      RETURN SELF AS RESULT
      IS
        CURRENT_ITEM PLAYGROUND.ITEM;
      BEGIN
        R_ITEMS := P_R_ITEMS;
        SELF.N_TOTAL_WEIGHT := 0;
        SELF.N_TOTAL_VALUE := 0;
        FOR IDX IN 1 .. SELF.R_ITEMS.count
        LOOP
          CURRENT_ITEM := SELF.R_ITEMS(IDX);
          SELF.N_TOTAL_WEIGHT := SELF.N_TOTAL_WEIGHT + CURRENT_ITEM.GET_WEIGHT();
          SELF.N_TOTAL_VALUE := SELF.N_TOTAL_VALUE + CURRENT_ITEM.GET_VALUE();
        END LOOP;
        RETURN;
      END;

    MEMBER FUNCTION GET_TOTAL_VALUE
      RETURN NUMBER
      IS
      BEGIN
        RETURN SELF.N_TOTAL_VALUE;
      END;

    MEMBER FUNCTION GET_TOTAL_WEIGHT
      RETURN NUMBER
      IS
      BEGIN
        RETURN SELF.N_TOTAL_WEIGHT;
      END;

    MEMBER FUNCTION GET_ASSORTMENTS
      RETURN PLAYGROUND.ITEMS
      IS
      BEGIN
        RETURN SELF.R_ITEMS;
      END GET_ASSORTMENTS;

  END;
/
--##############################################


--###############---------START------------###############################
CREATE TYPE ITEM_ASSORTMENTS AS VARRAY (1000) OF PLAYGROUND.ITEM_ASSORTMENT;
/

CREATE TYPE ITEM_ASSORTMENT_CONTAINER
  AUTHID DEFINER
  AS
  OBJECT (ASSORTMENTS PLAYGROUND.ITEM_ASSORTMENTS,
          CONSTRUCTOR FUNCTION ITEM_ASSORTMENT_CONTAINER(SELF IN OUT ITEM_ASSORTMENT_CONTAINER)
            RETURN SELF AS RESULT,
          MEMBER PROCEDURE ADD_ASSORTMENT(SELF IN OUT NOCOPY ITEM_ASSORTMENT_CONTAINER,
                                          ASSORTMENT         PLAYGROUND.ITEM_ASSORTMENT),
          MEMBER FUNCTION GET_TOTAL_ASSORTMENTS
            RETURN NUMBER,
          MEMBER FUNCTION GET_ASSRTMNTS_WITH_WGHT_BELOW(P_N_WEIGHT NUMBER)
            RETURN PLAYGROUND.ITEM_ASSORTMENTS);
/ 


CREATE TYPE BODY ITEM_ASSORTMENT_CONTAINER
  AS

    CONSTRUCTOR FUNCTION ITEM_ASSORTMENT_CONTAINER(SELF IN OUT ITEM_ASSORTMENT_CONTAINER)
      RETURN SELF AS RESULT
      IS
      BEGIN
        SELF.ASSORTMENTS := PLAYGROUND.ITEM_ASSORTMENTS();
        RETURN;
      END;

    MEMBER PROCEDURE ADD_ASSORTMENT(SELF IN OUT NOCOPY ITEM_ASSORTMENT_CONTAINER,
                                    ASSORTMENT         PLAYGROUND.ITEM_ASSORTMENT)
      IS
      BEGIN
        SELF.ASSORTMENTS.extend;
        SELF.ASSORTMENTS(SELF.ASSORTMENTS.last) := ASSORTMENT;
      END ADD_ASSORTMENT;

    MEMBER FUNCTION GET_TOTAL_ASSORTMENTS
      RETURN NUMBER
      IS
      BEGIN
        RETURN SELF.ASSORTMENTS.count;
      END GET_TOTAL_ASSORTMENTS;

    MEMBER FUNCTION GET_ASSRTMNTS_WITH_WGHT_BELOW(P_N_WEIGHT NUMBER)
      RETURN PLAYGROUND.ITEM_ASSORTMENTS
      IS
        CURRENT_ASSORTMENT PLAYGROUND.ITEM_ASSORTMENT;
        R_RES              PLAYGROUND.ITEM_ASSORTMENTS := PLAYGROUND.ITEM_ASSORTMENTS();
      BEGIN
        FOR IDX IN SELF.ASSORTMENTS.first .. SELF.ASSORTMENTS.last
        LOOP
          CURRENT_ASSORTMENT := SELF.ASSORTMENTS(IDX);
          IF CURRENT_ASSORTMENT.GET_TOTAL_WEIGHT() <= P_N_WEIGHT
          THEN
            R_RES.extend;
            R_RES(R_RES.last) := CURRENT_ASSORTMENT;
          END IF;
        END LOOP;
        RETURN R_RES;
      END GET_ASSRTMNTS_WITH_WGHT_BELOW;

  END;