CREATE OR REPLACE PACKAGE BODY "PLAYGROUND"."KNAPSACK" 
  AS
  TYPE SUB_SOLUTION_LIST IS TABLE OF PLAYGROUND.SUB_SOLUTION;
  TYPE SUB_SOLUTION_MATRIX IS TABLE OF SUB_SOLUTION_LIST;


  FUNCTION CREATE_SUB_SOLUTION_MATRIX(NUMBER_OF_ROWS    NUMBER,
                                      NUMBER_OF_COLUMNS NUMBER)
    RETURN SUB_SOLUTION_MATRIX
    AS
      R_CURRENT_ROW SUB_SOLUTION_LIST;
      MATRIX        SUB_SOLUTION_MATRIX := SUB_SOLUTION_MATRIX();
    BEGIN
      FOR ROW_IDX IN 1 .. NUMBER_OF_ROWS
      LOOP
        R_CURRENT_ROW := SUB_SOLUTION_LIST();
        FOR COL_IDX IN 1 .. NUMBER_OF_COLUMNS
        LOOP
          R_CURRENT_ROW.extend;
          R_CURRENT_ROW(COL_IDX) := NEW PLAYGROUND.SUB_SOLUTION(0, PLAYGROUND.ITEMS());
        END LOOP;
        MATRIX.extend;
        MATRIX(ROW_IDX) := R_CURRENT_ROW;
      END LOOP;
      RETURN MATRIX;
    END CREATE_SUB_SOLUTION_MATRIX;

  PROCEDURE PRINT_MATRIX(P_MATRIX IN SUB_SOLUTION_MATRIX)
    AS
      R_CURRENT_ROW        SUB_SOLUTION_LIST;
      CURRENT_SUB_SOLUTION PLAYGROUND.SUB_SOLUTION;
    BEGIN
      FOR ROW_IDX IN 1 .. P_MATRIX.count
      LOOP
        R_CURRENT_ROW := P_MATRIX(ROW_IDX);
        FOR COL_IDX IN 1 .. R_CURRENT_ROW.count
        LOOP
          CURRENT_SUB_SOLUTION := R_CURRENT_ROW(COL_IDX);
          DBMS_OUTPUT.PUT(CURRENT_SUB_SOLUTION.GET_BEST_VALUE());
        END LOOP;
        DBMS_OUTPUT.NEW_LINE();
      END LOOP;
    END PRINT_MATRIX;


  FUNCTION GET_BEST_VALUE(P_ITEMS_IN_STORE IN     PLAYGROUND.ITEMS,
                          P_MAX_KNAPSACK_CAPACITY NUMBER)
    RETURN NUMBER
    AS
      SUB_SOLUTIONS                  SUB_SOLUTION_MATRIX;

      N_NUMBER_OF_REQ_ROWS           NUMBER(19);
      N_NUMBER_OF_REQ_COLUMNS        NUMBER(19);

      CURRENT_ITEM                   PLAYGROUND.ITEM;
      IDX_CURRENT_ITEM_FROM_STORE    NUMBER(19);

      CURRENT_SUB_SOLUTION           PLAYGROUND.SUB_SOLUTION;
      SUB_SOLUTION_WITHOUT_CRRT_ITEM PLAYGROUND.SUB_SOLUTION;
      SUB_SOL_AFTER_ADD_CRT_ITM      PLAYGROUND.SUB_SOLUTION;
      N_VALUE_INCLUDING_CURRENT_ITEM NUMBER(19);
      N_CAPACITY_LEFT_IN_KNAPSACK    NUMBER(19);
      IMAGINARY_KNAPSACK_CAPACITY    NUMBER(19);
    BEGIN
      N_NUMBER_OF_REQ_ROWS := P_ITEMS_IN_STORE.count + 1;
      N_NUMBER_OF_REQ_COLUMNS := P_MAX_KNAPSACK_CAPACITY + 1;

      SUB_SOLUTIONS := CREATE_SUB_SOLUTION_MATRIX(N_NUMBER_OF_REQ_ROWS, N_NUMBER_OF_REQ_COLUMNS);

      -- start at 2 as first row in matrix corresponds to Item0 (without items no value in knapsack)
      FOR ROW_IDX IN 2 .. N_NUMBER_OF_REQ_ROWS
      LOOP
        IDX_CURRENT_ITEM_FROM_STORE := ROW_IDX - 1;
        CURRENT_ITEM := P_ITEMS_IN_STORE(IDX_CURRENT_ITEM_FROM_STORE);
        -- start at 2 as first col in matrix corresponds to zero capacity (without knapsack capacity you can't put anything in it)        FOR COL_IDX IN 2 .. N_NUMBER_OF_REQ_COLUMNS
        LOOP
          IMAGINARY_KNAPSACK_CAPACITY := COL_IDX - 1;
          IF IMAGINARY_KNAPSACK_CAPACITY >= CURRENT_ITEM.GET_WEIGHT()
          THEN
            SUB_SOLUTION_WITHOUT_CRRT_ITEM := SUB_SOLUTIONS(ROW_IDX)(IMAGINARY_KNAPSACK_CAPACITY);

            N_CAPACITY_LEFT_IN_KNAPSACK := IMAGINARY_KNAPSACK_CAPACITY - CURRENT_ITEM.GET_WEIGHT();
            
            -- add 1 to capacity as index of arrays start at 1 not 0
            SUB_SOL_AFTER_ADD_CRT_ITM := SUB_SOLUTIONS(ROW_IDX - 1)(N_CAPACITY_LEFT_IN_KNAPSACK + 1);
            N_VALUE_INCLUDING_CURRENT_ITEM := CURRENT_ITEM.GET_VALUE() + SUB_SOL_AFTER_ADD_CRT_ITM.GET_BEST_VALUE();
            CURRENT_SUB_SOLUTION := SUB_SOLUTIONS(ROW_IDX)(COL_IDX);
            DBMS_OUTPUT.PUT_LINE('choosing between ' || SUB_SOLUTION_WITHOUT_CRRT_ITEM.GET_BEST_VALUE() || ' and ' || N_VALUE_INCLUDING_CURRENT_ITEM);
            DBMS_OUTPUT.PUT_LINE('choosing best value=' || GREATEST(SUB_SOlUTION_WITHOUT_CRRT_ITEM.GET_BEST_VALUE(),N_VALUE_INCLUDING_CURRENT_ITEM));
            
            CURRENT_SUB_SOLUTION.SET_BEST_VALUE(GREATEST(SUB_SOlUTION_WITHOUT_CRRT_ITEM.GET_BEST_VALUE(),N_VALUE_INCLUDING_CURRENT_ITEM));
            DBMS_OUTPUT.PUT_LINE('solution has ' || CURRENT_SUB_SOLUTION.GET_BEST_VALUE());
            SUB_SOLUTIONS(ROW_IDX)(COL_IDX) := CURRENT_SUB_SOLUTION;
            DBMS_OUTPUT.PUT_LINE('solution matrix has ' || SUB_SOLUTIONS(ROW_IDX)(COL_IDX).GET_BEST_VALUE());
          ELSE
            SUB_SOLUTIONS(ROW_IDX)(IMAGINARY_KNAPSACK_CAPACITY) := SUB_SOLUTIONS(ROW_IDX - 1)(IMAGINARY_KNAPSACK_CAPACITY);
          END IF;
        END LOOP;
      END LOOP;



      PRINT_MATRIX(SUB_SOLUTIONS);
      RETURN SUB_SOLUTIONS(N_NUMBER_OF_REQ_ROWS)(N_NUMBER_OF_REQ_COLUMNS).GET_BEST_VALUE();
    END GET_BEST_VALUE;




END KNAPSACK;
/
