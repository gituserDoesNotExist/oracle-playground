CREATE OR REPLACE PACKAGE BODY "PLAYGROUND"."KNAPSACK_PERMUTATION" 
  AS

  FUNCTION BUILD_ASSORTMENT_FROM_IDX_COMB(P_COMBINATION    IN PLAYGROUND.INTEGER_ARRAY,
                                          P_ITEMS_IN_STORE IN PLAYGROUND.ITEMS)
    RETURN PLAYGROUND.ITEM_ASSORTMENT
    IS
      N_CURRENT_INDEX_OF_COMB NUMBER(19);
      CURRENT_ITEM            PLAYGROUND.ITEM;
      R_ITEMS_FROM_COMB       PLAYGROUND.ITEMS := PLAYGROUND.ITEMS();
    BEGIN
      FOR IDX IN 1 .. P_COMBINATION.count
      LOOP
        N_CURRENT_INDEX_OF_COMB := P_COMBINATION(IDX);
        CURRENT_ITEM := P_ITEMS_IN_STORE(N_CURRENT_INDEX_OF_COMB);
        R_ITEMS_FROM_COMB.extend;
        R_ITEMS_FROM_COMB(R_ITEMS_FROM_COMB.last) := NEW PLAYGROUND.ITEM(CURRENT_ITEM.GET_WEIGHT(), CURRENT_ITEM.GET_VALUE());
      END LOOP;
      RETURN NEW PLAYGROUND.ITEM_ASSORTMENT(R_ITEMS_FROM_COMB);
    END BUILD_ASSORTMENT_FROM_IDX_COMB;


  PROCEDURE FILL_CONTAINER_FROM_IDX_MATRIX(P_IDX_MATRIX                IN            PLAYGROUND.INTEGER_MATRIX,
                                           P_ITEMS_IN_STORE            IN            PLAYGROUND.ITEMS,
                                           P_ITEM_ASSORTMENT_CONTAINER IN OUT NOCOPY PLAYGROUND.ITEM_ASSORTMENT_CONTAINER)
    IS
      R_CURRENT_COMBINATION   PLAYGROUND.INTEGER_ARRAY;
      CURRENT_ITEM_ASSORTMENT PLAYGROUND.ITEM_ASSORTMENT;
    BEGIN
      FOR ROW_IDX IN 1 .. P_IDX_MATRIX.count
      LOOP
        R_CURRENT_COMBINATION := P_IDX_MATRIX(ROW_IDX);
        CURRENT_ITEM_ASSORTMENT := BUILD_ASSORTMENT_FROM_IDX_COMB(R_CURRENT_COMBINATION, P_ITEMS_IN_STORE);
        P_ITEM_ASSORTMENT_CONTAINER.ADD_ASSORTMENT(CURRENT_ITEM_ASSORTMENT);
      END LOOP;

    END FILL_CONTAINER_FROM_IDX_MATRIX;

  FUNCTION FIND_ASSRTMNT_WITH_HIGHEST_VAL(P_ASSORTMENTS IN PLAYGROUND.ITEM_ASSORTMENTS)
    RETURN PLAYGROUND.ITEM_ASSORTMENT
    IS
      N_MAX_VALUE              NUMBER(19) := 0;
      CURRENT_ASSORTMENT       PLAYGROUND.ITEM_ASSORTMENT;
      ASSORTMENT_HIGHEST_VALUE PLAYGROUND.ITEM_ASSORTMENT;
    BEGIN
      FOR IDX IN P_ASSORTMENTS.first .. P_ASSORTMENTS.last
      LOOP
        CURRENT_ASSORTMENT := P_ASSORTMENTS(IDX);
        IF CURRENT_ASSORTMENT.GET_TOTAL_VALUE() > N_MAX_VALUE
        THEN
          N_MAX_VALUE := CURRENT_ASSORTMENT.GET_TOTAL_VALUE();
          ASSORTMENT_HIGHEST_VALUE := CURRENT_ASSORTMENT;
        END IF;
      END LOOP;
      RETURN ASSORTMENT_HIGHEST_VALUE;
    END FIND_ASSRTMNT_WITH_HIGHEST_VAL;



  FUNCTION GET_ITEMS_OPTIMIZING_VALUE(P_ITEMS_IN_STORE IN PLAYGROUND.ITEMS,
                                      P_N_MAX_WEIGHT   IN NUMBER)
    RETURN PLAYGROUND.ITEM_ASSORTMENT
    IS
      ASSORTMENT_CONTAINER       PLAYGROUND.ITEM_ASSORTMENT_CONTAINER := NEW PLAYGROUND.ITEM_ASSORTMENT_CONTAINER();

      R_SUBSCRIPTS               INTEGER_ARRAY                        := INTEGER_ARRAY();
      T_COMBINATIONS             INTEGER_MATRIX;

      N_MIN_PICKS                NUMBER(19)                           := 1;
      N_MAX_PICKS                NUMBER(19);

      ASSRTMENTS_BELOW_THRESHOLD PLAYGROUND.ITEM_ASSORTMENTS;
    BEGIN
      N_MAX_PICKS := P_ITEMS_IN_STORE.count;
      R_SUBSCRIPTS := LIST_UTILS.CREATE_INTEGER_ARRAY_FROM_TO(N_MIN_PICKS, N_MAX_PICKS);

      FOR IDX IN R_SUBSCRIPTS.first .. R_SUBSCRIPTS.last
      LOOP
        T_COMBINATIONS := PERMUTATION.KOMBINATION_OHNE_WIEDERHOLUNG(R_SUBSCRIPTS, R_SUBSCRIPTS(IDX));
        FILL_CONTAINER_FROM_IDX_MATRIX(T_COMBINATIONS, P_ITEMS_IN_STORE, ASSORTMENT_CONTAINER);
      END LOOP;
      ASSRTMENTS_BELOW_THRESHOLD := ASSORTMENT_CONTAINER.GET_ASSRTMNTS_WITH_WGHT_BELOW(P_N_MAX_WEIGHT);
    
      RETURN FIND_ASSRTMNT_WITH_HIGHEST_VAL(ASSRTMENTS_BELOW_THRESHOLD);

      
    END;

END KNAPSACK_PERMUTATION;
/
